方法一：通过层序遍历二叉树的思想，在添加节点值的时候，通过正序和倒序交换来添加 list
import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private boolean tag = true;
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        if (pRoot == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(pRoot);
        while (!queue.isEmpty()) {
            int size = queue.size();
            ArrayList<Integer> list = new ArrayList<>();
            int[] arr = new int[size];
            int index = 0;
            while (size > 0) {
                TreeNode cur = queue.poll();
                size--;
                if (cur.left != null) {
                    queue.add(cur.left);
                }
                if (cur.right != null) {
                    queue.add(cur.right);
                }
                arr[index++] = cur.val;
                if (size == 0) {
                    helper(arr, list);
                }
            }
            res.add(list);
        }
        return res;
    }
    public void helper(int[] arr, ArrayList<Integer> list) {
        if (tag) {
            for (int x : arr) {
                list.add(x);
            }
            tag = false;
        } else {
            for (int i = arr.length - 1; i >= 0; i--) {
                list.add(arr[i]);
            }
            tag = true;
        }
    }
}

// 方法二：通过 ArrayList 的 api 来帮助按照题目规则添加二叉树结点值，或者使用 Collections.reverse()
import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private boolean tag = true;
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        if (pRoot == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(pRoot);
        while (!queue.isEmpty()) {
            int size = queue.size();
            ArrayList<Integer> list = new ArrayList<>();
            while (size > 0) {
                TreeNode cur = queue.poll();
                size--;
                list.add(cur.val);
                if (cur.left != null) {
                    queue.add(cur.left);
                }
                if (cur.right != null) {
                    queue.add(cur.right);
                }
            }
            if (tag) {
                tag = false;
            } else {
                Collections.reverse(list);
                tag = true;
            }
            res.add(list);
        }
        return res;
    }
}
