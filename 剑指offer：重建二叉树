/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    // 一个二叉树通过先序遍历的结果和中序遍历的结果就可以确定
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if (pre.length == 0 || in.length == 0) {
            return null;
        }
        // 因为题目说明没有重复的节点，所以就在中序数组中寻找根节点
        // 找到根节点后，根节点左边的就是左子树，右边的就是右子树
        TreeNode root = new TreeNode(pre[0]);
        // 在中序里确定左子树和右子树的节点
        for (int i = 0; i < in.length; i++) {
            if (in[i] == pre[0]) {
                // 递归
                root.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,i+1), Arrays.copyOfRange(in,0,i));
                root.right = reConstructBinaryTree(Arrays.copyOfRange(pre,i+1,pre.length), 
                                                   Arrays.copyOfRange(in,i+1,in.length));
                break;
            }
        }
        return root;
    }
}
