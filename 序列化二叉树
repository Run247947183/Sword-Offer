/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private int index = -1;
    // 先序遍历二叉树
    String Serialize(TreeNode root) {
        if (root == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        helper1(root, sb);
        return sb.toString();
  }
    public void helper1(TreeNode root, StringBuilder sb) {
        if (root == null) {
            sb.append("#!");
            return;
        }
        sb.append(root.val + "!");
        helper1(root.left, sb);
        helper1(root.right, sb);
    }
    
    // 反序列化二叉树
    TreeNode Deserialize(String str) {
        if (str == null || str == "") {
            return null;
        }
        String[] res = str.split("!");
        return helper2(res);
  }
    public TreeNode helper2(String[] res) {
        index++;
        if (!res[index].equals("#")) {
            TreeNode root = new TreeNode(Integer.parseInt(res[index]));
            root.left = helper2(res);
            root.right = helper2(res);
            return root;
        }
        return null;
    }
}
