import java.util.ArrayList;
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private ArrayList<ArrayList<Integer>>  res = new ArrayList<>();
    private ArrayList<Integer> tmp = new ArrayList<>();
    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {
        helper(root, target);
        return res;
    }
    public void helper(TreeNode root, int tag) {
        if (root == null) {
            return;
        }
        tmp.add(root.val);
        tag -= root.val;
        if (tag == 0 && root.left == null && root.right == null) {
            res.add(new ArrayList<Integer>(tmp));
        }
        helper(root.left, tag);
        helper(root.right, tag);
        // 关键的一步：需要把当前左右子树递归过程中往 tmp 添加的元素清理掉
        // 这样才能保证当前 tmp 的正确性
        tmp.remove(tmp.size() - 1);
    }
}
