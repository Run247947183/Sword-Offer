import java.util.*;
/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private ArrayList<TreeNode> list = new ArrayList<>();
    TreeNode KthNode(TreeNode pRoot, int k)
    {
        helper(pRoot);
        if (k > list.size() || k <= 0) {
            return null;
        }
        return list.get(k - 1);
    }
    // 通过中序遍历二叉树，将搜索树按照从小到大的顺序加入 list 中
    public void helper(TreeNode root) {
        if (root == null) {
            return;
        }
        helper(root.left);
        list.add(root);
        helper(root.right);
    }
}

方法二：
/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
import java.util.*;
public class Solution {
    TreeNode KthNode(TreeNode pRoot, int k)
    {
        if (pRoot == null || k == 0) {
            return null;
        }
        Stack<TreeNode> stack = new Stack<>();
        while (true) {
            while (pRoot != null) {
                stack.push(pRoot);
                pRoot = pRoot.left;
            }
            if (stack.isEmpty()) {
                break;
            }
            TreeNode node = stack.pop();
            k--;
            if (k == 0) {
                return node;
            }
            pRoot = node.right;
        }
        return null;
    }
}
