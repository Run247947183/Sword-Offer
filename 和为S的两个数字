方法一：利用HashMap
import java.util.ArrayList;
import java.util.*;
public class Solution {
    public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {
        ArrayList<Integer> list = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < array.length; i++) {
            map.put(i, array[i]);
        }
        int[] arr = new int[2];
        boolean tag = true;
        for (int num : array) {
            if (map.containsValue(sum - num)) {
                if (tag) {
                    arr[0] = num;
                    arr[1] = sum - num;
                    tag = false;
                } else {
                    if (arr[0] * arr[1] > num * (sum - num)) {
                        arr[0] = num;
                        arr[1] = sum - num;
                    }
                }
            }
        }
        if (arr[0] == 0 && arr[1] == 0) {
            return list;
        }
        if (arr[0] > arr[1]) {
            list.add(arr[1]);
            list.add(arr[0]);
            return list;
        }
        list.add(arr[0]);
        list.add(arr[1]);
        return list;
    }
}


方法二：
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {
        ArrayList<Integer> list = new ArrayList<>();
        if (array == null || array.length <= 1) {
            return list;
        }
        int left = 0;
        int right = array.length - 1;
        while (left < right) {
            if (array[left] + array[right] == sum) {
                // 注意：这里最外层为最小值
                list.add(array[left]);
                list.add(array[right]);
                break;
            } else if (array[left] + array[right] > sum) {
                right--;
            } else {
                left++;
            }
        }
        return list;
    }
}
