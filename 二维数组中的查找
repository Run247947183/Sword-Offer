public class Solution {
    public boolean Find(int target, int [][] array) {
        if (array == null || array.length == 0 || array[0].length == 0) {
            return false;
        }
        for (int i = 0; i < array.length; i++) {
            if (array[i][array[i].length - 1] < target) {
                continue;
            }
            int left = 0;
            int right = array[i].length - 1;
            int mid = 0;
            while (left <= right) {
                mid = (left + right) / 2;
                if (array[i][mid] == target) {
                    return true;
                } else if (array[i][mid] < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return false;
    }
}

// 方法二：
public class Solution {
    public boolean Find(int target, int [][] array) {
        if (array == null || array.length == 0 || array[0].length == 0) {
            return false;
        }
        // 按照二维数组的有序性来查找
        // 从二维数组的左下方开始查找
        int rows = array[0].length;
        int cols = array.length - 1;
        int row = 0;
        while (row < rows && cols >= 0) {
            if (array[cols][row] > target) {
                cols--;
            } else if (array[cols][row] < target) {
                row++;
            } else {
                return true;
            }
        }
        return false;
    }
}
