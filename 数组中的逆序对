public class Solution {
    private int count = 0;
    public int InversePairs(int [] array) {
        mergeSort(array, 0, array.length - 1);
        return count;
    }
    public void mergeSort(int[] array, int left, int right) {
        if (left >= right) {
            return;
        }
        int mid = (right + left) / 2;
        mergeSort(array, left, mid);
        mergeSort(array, mid + 1, right);
        merge(array, left, mid, right);
    }
    public void merge(int[] array, int left, int mid, int right) {
        int len = right - left + 1;
        int[] arr = new int[len];
        int i = left;
        int j = mid + 1;
        int index = 0;
        while (i <= mid && j <= right) {
            if (array[i] > array[j]) {
                arr[index++] = array[j++];
                count = (count + (mid - i + 1)) % 1000000007;
            } else {
                arr[index++] = array[i++];
            }
        }
        while (i <= mid) {
            arr[index++] = array[i++];
        }
        while (j <= right) {
            arr[index++] = array[j++];
        }
        for (int k = 0; k < len; k++) {
            array[left + k] = arr[k];
        }
    }
}
