
递归
public class Solution {
    public int Fibonacci(int n) {
        if(n<=1){
            return n;
        }
        return Fibonacci(n-1) + Fibonacci(n-2);
    }
}

方法二：
public class Solution {
    public int Fibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        if (n == 2) {
            return 1;
        }
        int one = 0;
        int two = 1;
        int three = 1;
        for (int i = 3; i <= n; i++) {
            one = (two + three);
            two = three;
            three = one;
        }
        return one;
    }
}

方法三：剪枝
import java.util.*;
public class Solution {
    private HashMap<Integer, Integer> map = new HashMap<>();
    public int Fibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        int res1 = 0;
        if (map.containsKey(n - 1)) {
            res1 = map.get(n - 1);
        } else {
            res1 = Fibonacci(n - 1);
            map.put(n - 1, res1);
        }
        int res2 = 0;
        if (map.containsKey(n - 2)) {
            res2 = map.get(n - 2);
        } else {
            res2 = Fibonacci(n - 2);
            map.put(n - 2, res2);
        }
        return res1 + res2;
    }
}
