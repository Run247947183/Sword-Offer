# Sword-Offer
剑指offer
class Solution {
    // 快速排序思想对 nums 数组中的数字进行从小到大的排序
    // 主要排序思路：
    // 假设现在有两个字符串 s1 和 s2
    // （1）如果 (s1 + s2).compareTo(s2 + s1) >= 0 则 s1 > s2
    // （2）相反则 s2 > s1
    // 所以将数组中的数字进行排序后，就是最小的组成数字
    public String minNumber(int[] nums) {
        if (nums == null || nums.length == 0) {
            return "";
        }
        String[] str = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            str[i] = nums[i] + "";
        }
        sort(str, 0, nums.length - 1);
        StringBuilder sb = new StringBuilder();
        for (String s : str) {
            sb.append(s);
        }
        return sb.toString();
    }
    public void sort(String[] str, int left, int right) {
        if (left >= right) {
            return;
        }
        int pos = partition(str, left, right);
        sort(str, left, pos - 1);
        sort(str, pos + 1, right);
    }
    public int partition(String[] str, int left, int right) {
        int baseIndex = right;
        String baseValue = str[baseIndex];
        while (left < right) {
            while (left < right && (str[left] + baseValue).compareTo(baseValue + str[left]) <= 0) {
                left++;
            }
            while (left < right && (str[right] + baseValue).compareTo(baseValue + str[right]) >= 0) {
                right--;
            }
            swap(str, left, right);
        }
        swap(str, left, baseIndex);
        return left;
    }
    public void swap(String[] str, int x, int y) {
        String s = str[x];
        str[x] = str[y];
        str[y] = s;
    }
}
