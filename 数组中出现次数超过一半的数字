最佳方法：摩尔投票法
class Solution {
    // 摩尔投票法
    // 如果记众数的票数为 +1，非众数的票数为 -1，那么当遍历一次数组后，票数一定大于 0
    // 假设数组长度为 n ，众数为 x，那么在前 a 个元素中票数为 0，那么在 a 到 n 这部分元素中，众数的票数一定大于 0
    public int majorityElement(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int vote = 0;
        int resNum = 0;
        for (int num : nums) {
            if (vote == 0) {
                // 如果票数为 0 ，则假设当前 num 为众数
                resNum = num;
            }
            // 是众数就加一，否则减一
            vote += num == resNum ? 1 : -1; 
        }
        return resNum;
    }
}


方法一：hashMap
import java.util.*;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if (array.length == 0) {
            return 0;
        }
        if (array.length == 1) {
            return array[0];
        }
        int tag = array.length / 2;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < array.length; i++) {
            if (map.getOrDefault(array[i], 0) != 0) {
                map.put(array[i], map.get(array[i]) + 1);
                if (map.get(array[i]) > tag) {
                    return array[i];
                }
            } else {
                map.put(array[i], 1);
            }
        }
        return 0;
    }
}

方法二：数组
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if (array.length == 0) {
            return 0;
        }
        if (array.length == 1) {
            return array[0];
        }
        int[] arr = new int[10];
        int tag = array.length / 2;
        for (int num : array) {
            arr[num]++;
            if (arr[num] > tag) {
                return num;
            }
        }
        return 0;
    }
}

方法三：排序
class Solution {
    public int majorityElement(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        Arrays.sort(nums);
        int tag = nums.length / 2;
        int i = 0;
        while (i < nums.length - 1) {
            if (nums[i] == nums[i + 1]) {
                int j = i + 1;
                while (j < nums.length && nums[j] == nums[i]) {
                    j++;
                }
                if (j - i > tag) {
                    tag = nums[i];
                    break;
                }
                i = j - 1;
            } else {
                i++;
            }
        }
        return tag;
    }
}
